# ============================================
# Chess-themed tmux Configuration with Neovim Integration
# ============================================

# --- Core Settings ---
set -g prefix C-a                       # Change prefix to Ctrl+a (same as your current config)
unbind C-b                              # Remove the old prefix
bind C-a send-prefix                    # Send Ctrl+a to applications by pressing it twice

# Improve colors for Neovim compatibility
set -g default-terminal "screen-256color"  # More universal compatibility
set -ga terminal-overrides ",*256col*:Tc"  # True color support
set -sa terminal-features ',XXX:RGB'       # Proper RGB support for modern terminals

# Reduce escape-time delay for better Neovim experience
set -sg escape-time 0                   # Critical for Neovim - eliminates delay

# Focus events for Neovim autoread
set -g focus-events on                  # Pass focus events to applications (needed for Neovim)

# Increase scrollback buffer size
set -g history-limit 100000

# Start window numbering at 1
set -g base-index 1
setw -g pane-base-index 1

# Renumber windows when a window is closed
set -g renumber-windows on

# --- Enhanced Mouse Support ---
set -g mouse on                         # Enable comprehensive mouse support

# Allow mouse dragging to resize panes
bind -n MouseDrag1Border resize-pane -M

# Double click on the window list to open a new window
bind -n DoubleClick1Status new-window

# Triple click to select and copy a line
bind -n TripleClick1Pane select-pane \; copy-mode \; send -X select-line

# Right click on pane title to rename window
bind -n MouseDown3Status command-prompt -p "rename window:" "rename-window '%%'"

# Right click in a pane to display context menu (shown in status line)
bind -n MouseDown3Pane display-menu -T "#[align=centre]♟️ Pane Menu" -x M -y M \
  "Horizontal Split" h "split-window -h" \
  "Vertical Split" v "split-window -v" \
  "" \
  "Swap Up" u "swap-pane -U" \
  "Swap Down" d "swap-pane -D" \
  "" \
  "#{?pane_marked,Unmark,Mark}" m "select-pane -m" \
  "#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z" \
  "" \
  "Kill Pane" x "kill-pane" \
  "Close Menu" q ""

# Right click on window list to display window menu
bind -n MouseDown3Status display-menu -T "#[align=centre]♞ Window Menu" -x W -y S \
  "New Window" c new-window \
  "Rename Window" r "command-prompt -I \"#W\" \"rename-window -- '%%'\"" \
  "" \
  "Kill Window" X kill-window \
  "Kill Other Windows" k "kill-window -a" \
  "" \
  "Move Window Left" l "swap-window -t:-1" \
  "Move Window Right" r "swap-window -t:+1" \
  "" \
  "Close Menu" q ""

# --- Keybindings and Navigation ---
# Reload configuration
bind r source-file ~/.tmux.conf \; display "♚ Configuration reloaded!"

# Split panes using | and - and retain current directory
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
unbind '"'
unbind %

# Create new window with current directory
bind c new-window -c "#{pane_current_path}"

# Vim-style pane navigation
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Smart pane switching with awareness of Vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n C-h if-shell "$is_vim" 'send-keys C-h' 'select-pane -L'
bind -n C-j if-shell "$is_vim" 'send-keys C-j' 'select-pane -D'
bind -n C-k if-shell "$is_vim" 'send-keys C-k' 'select-pane -U'
bind -n C-l if-shell "$is_vim" 'send-keys C-l' 'select-pane -R'

# Window navigation with Shift+arrow without prefix
bind -n S-Left previous-window
bind -n S-Right next-window

# Window navigation with Alt+number without prefix
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9

# Resize panes with Prefix + HJKL (repeatable)
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Quickly swap panes
bind > swap-pane -D
bind < swap-pane -U

# --- Copy Mode (Vim style with system clipboard integration) ---
setw -g mode-keys vi  # Vim keybindings in copy mode

# Setup 'v' to begin selection as in Vim
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi C-v send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-pipe-and-cancel "xclip -in -selection clipboard"

# Copy to system clipboard with xclip (Linux) or pbcopy (macOS)
if-shell "command -v xclip" {
    bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
    bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
}
if-shell "command -v pbcopy" {
    bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
    bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
}

# Double click selects the word and copies
bind -T copy-mode-vi DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-and-cancel "xclip -in -selection clipboard"

# Enter copy mode with f
bind f copy-mode

# --- Advanced Features ---
# Toggle synchronize-panes
bind S setw synchronize-panes \; display "♟ Synchronize panes #{?pane_synchronized,ON,OFF}"

# Break pane to new window
bind b break-pane

# Join marked pane to current window
bind J join-pane

# Display pane numbers for quick selection
bind q display-pane -d 3000

# Toggle pane zoom
bind z resize-pane -Z

# --- Status Bar Optimization (minimalist for Neovim integration) ---
# Option to hide status bar completely when using Neovim
# You can toggle this with Prefix + t
set -g status-position top              # Move status bar to top to avoid conflict with Neovim
set -g status-style bg=colour235,fg=colour223 # darker bg to better match your Neovim theme
set -g status-left "#[fg=colour235,bg=colour214,bold] #S "
set -g status-right "#[fg=colour214,bold]%H:%M "
set -g status-right-length 25
set -g status-left-length 20
set -g status-justify left

# Minimal window status styling
setw -g window-status-current-style fg=colour214,bg=colour236 # fg=orange
setw -g window-status-current-format ' #I:#W '
setw -g window-status-style fg=colour246,bg=colour235
setw -g window-status-format ' #I:#W '

# Pane border styling
set -g pane-border-style fg=colour237 # dark grey
set -g pane-active-border-style fg=colour142 # green

# Message styling
set -g message-style bg=colour239,fg=colour214,bold # bg=grey, fg=orange

# Activity monitoring
setw -g monitor-activity on
set -g visual-activity off

# Modes styling (copy mode)
setw -g mode-style bg=colour239,fg=colour214,bold # bg=grey, fg=orange

# --- Neovim Specific Integrations ---
# Hide tmux status when in Neovim fullscreen
bind N set -g status off \; display "Entered Neovim mode - status hidden"
bind M set -g status on \; display "Exited Neovim mode - status visible"

# Extra Neovim integration
set -g set-clipboard on                  # Use system clipboard like Neovim
set -g detach-on-destroy off             # Don't detach tmux when destroying session

# Clear screen with Prefix + C-l (since C-l is used for navigation)
bind C-l send-keys 'C-l'

# --- Session Management ---
# Session management shortcuts
bind C-s choose-session                  # Interactive session chooser
bind C-x confirm-before -p "Kill session #S? (y/n)" kill-session  # Kill current session
bind C-c command-prompt -p "New session name:" "new-session -s '%%'"  # Create new session

# Named "chess" session with coding layout
bind C new-session -s chess -n "nvim" \; \
  send-keys "cd ~/projects" C-m \; \
  split-window -v -p 20 \; \
  select-pane -t 0 \; \
  send-keys "nvim" C-m

# --- Additional Utilities ---
# Open lazygit in a new window
bind g new-window -n "git" "lazygit"

# Toggle status bar visibility with Prefix + t
bind t set -g status

# Save entire tmux history to file
bind P command-prompt -p 'Save history to filename:' -I '~/tmux.history' 'capture-pane -S -32768 ; save-buffer %1 ; delete-buffer'

# --- Plugin Management (TPM) ---
# List of plugins (minimal set for Neovim integration)
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

# Resurrect sessions between restarts
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-strategy-nvim 'session'  # Restore Neovim sessions
set -g @resurrect-capture-pane-contents 'on'

# Optional: vim-tmux-navigator (uncomment if you want to install)
# set -g @plugin 'christoomey/vim-tmux-navigator'

# Initialize TMUX plugin manager (keep at the very bottom)
run -b '~/.tmux/plugins/tpm/tpm'
